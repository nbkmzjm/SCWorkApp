extends ../views/layout/layout.jade

	
block title 
	title Home

block header
	include ../views/layout/header.jade

block horMenu
	include ../views/layout/horMenu.jade

block content
	#container
		//- input(type='text' id='calendar')
		#calenderPick
		#mainSC
		#SCNoteDiv
		#eventAction.container
		nav(class="navbar navbar-default")
			div(class="container-fluid" id="taskOptionDiv")
	


append scripts 
	script(src="public/fnLib/homeFn.js")
	script.
		
		$(function (){
			
						
			calendarPick();
	
			$.post('/ajaxUser').done(mainSC);



		});
		
		function noteColor(assignNote, element){
			if (assignNote=='PTO'){
				element.style.color = 'green'
			}else if(assignNote=='PTO-R'){
				element.style.color = '#FFBD4B'
			}else{
				element.style.color = 'blue'
			}
		}

		var getKeys = function(obj){
		   var keys = [];
		   for(var key in obj){
		      keys.push(key);
		   }
		   return keys;
		}


		function mainSC(data){
			//- alert(JSON.stringify(data, null, 4))
			this.data = data
			var mainSC = $('#mainSC');
			mainSC.html('');

			var curDate = $('#calendar').val();
			var curSunday = getSunday(new Date(curDate));
			
			var dateSC = new Date(curSunday);
			var days = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];

			
			var table = document.createElement('table');
			table.setAttribute('id', 'main');
			table.setAttribute('class','table table-striped')
			var tr = document.createElement('tr');
				var td = document.createElement('td');
					td.appendChild(document.createTextNode('User'));
					
				tr.appendChild(td);
				for (var i=0; i<7; i++){
					 
					var td = document.createElement('td');
					td.appendChild(document.createTextNode(days[dateSC.getDay()]));
					td.appendChild(document.createElement('br'))
					td.appendChild(document.createTextNode(dateSC.toFullDate()))
					tr.appendChild(td);

					dateSC.setDate(dateSC.getDate()+1);
					
					}
			table.appendChild(tr);
			dateSC = new Date(curSunday);

			//- Create DateSC array with userID and dateSC
			var users = data.pData.users;
			var arrListDateSC = [];
				
			for (var i=0; i< users.length; i++){
			
				    for (var x=0; x<8; x++){
						var taskSCData = {};
						
						if (x==0){
							taskSCData.userId = users[i].id;
							taskSCData.dateSC = users[i].name;
						}else{
							taskSCData.userId = users[i].id;
							taskSCData.dateSC = dateSC.toFullDate();
							dateSC.setDate(dateSC.getDate()+1);
						}
						arrListDateSC.push(taskSCData);
					}
					
				var dateSC = new Date(curSunday);
			}

			
			$.post('/sysObjRead', {pData:['lockoutDate', 'date21LK']}).done(function(rData){
				
				
				//- alert(JSON.stringify(arrListDateSC, null, 4))
				
				var today = new Date()
				var lockoutDate = new Date(rData.lockoutDate||'4/24/16')
				var date21LK = new Date(rData.lockoutDate||'4/24/16')
				date21LK.setDate(lockoutDate.getDate()-21)

				//- var eDate = dateSC;
				//- eDate.setDate(dateSC.getDate()+7)
								
				$.post('/taskSC',{
					sDate:dateSC
					}).done(function(rData){

					//- alert(JSON.stringify(rData, null, 4))
					var assign = rData.assign
					
					var curUserTitle = rData.curUserTitle
					var userDelta = 0
					var SCNote = document.createElement('p')
					SCNote.id = 'SCNote'
					SCNote.style.color = '#00A117'
					SCNote.style.fontWeight = 'bold'
					
					arrListDateSC.forEach(function(item,i){
					
						var userId = item.userId
						var foundSC = function(assign, item){
							for (x = 0; x< assign.length; x++ ){
								if (assign[x].datePos==item.dateSC && assign[x].userId==userId){
								return true
								}
							}
							return false
						}(assign, item)
						if (foundSC){
							//- alert(JSON.stringify(assign[x], null, 4))
							var memo = assign[x].Memo
							var tracer = '';
							var firstTracer = '';
							var td = document.createElement('td');
							
							td.setAttribute('class','cell')
								var a = document.createElement('a')
								noteColor(assign[x].Note, a)
								a.innerHTML= assign[x].Note
									var span = document.createElement('span')
									span.style.color = '#FF8C5A'
									span.className = "badge"
									
									var assignTracers = assign[x].assignTracers
									var unreadCount = 0;
									assignTracers.forEach(function(assignTracer, i){
										var createdAt = new Date(assignTracer.createdAt)
										if(assignTracer.Read == false){
											if (i == 0){
												firstTracer = assignTracers[i].user.name+': '+createdAt.toTracerDate() +' | <b>'+assignTracer.Note +(assignTracer.Memo!=''?" <br>"+ '&nbsp&nbsp&nbsp&nbsp'+"<u>Memo</u>: "  + assignTracer.Memo:"</b>" )
											}else{
												tracer += assignTracers[i].user.name+': '+createdAt.toTracerDate() +' | <b>'+assignTracer.Note + (assignTracer.Memo!=''?" <br>"+ '&nbsp&nbsp&nbsp&nbsp'+"<u>Memo</u>: "  + assignTracer.Memo:"</b>" )+ "</b><br>"
											}
										
											unreadCount++
										}
									})
									if (unreadCount!=0){
										span.innerHTML = unreadCount
									}
									

									a.appendChild(span)
								a.setAttribute('href','#');
								a.setAttribute('data-toggle','popover');
								a.setAttribute('data-trigger','hover');
								a.setAttribute('data-placement','auto');
								a.style.fontWeight = 'bold'
								a.setAttribute('title', firstTracer);
								document.addEventListener('mousemove', function(){
									var taskSC = $('input[name=PTO]:checked').attr('value');
									if (taskSC=="SELECT"){

										a.setAttribute('data-content', tracer);
										
										$('[data-toggle="popover"]').popover({html:true})
									//- }else if (taskSC=='SELECT'){
									//- 	a.setAttribute('data-content', 'Memo:<br>' + memo);
									//- 	$('[data-toggle="popover"]').popover({html:true})
									}else{
										$('[data-toggle="popover"]').popover('destroy')
									}
								})
								td.addEventListener('click', function(assign){
									return function(){
										//- document.addEventListener('mousemove', function(){
										//- var taskSC = $('input[name=PTO]:checked').attr('value');
										//- 	if (taskSC=="SELECT"){
										//- 		console.log('select')
										//- 	}else{
										//- 	console.log('not select')
										//- 	}
										//- })
										$('#eventAction').html('')
										//- event.preventDefault()
										
										var table = document.createElement('table');
										table.setAttribute('id', 'eventAction');
										var tr = document.createElement('tr')
											var arrayField = ['Event Changes for '+ assign.datePos, 'Noticed']

											arrayField.forEach(function(field){
												
												var td = document.createElement('td')
												td.appendChild(document.createTextNode(field))
												tr.appendChild(td)
											})
										table.appendChild(tr)

										$.post('/assignTracerRead',{
											assignId:assign.id,
										}).done(function(Rdata){
											assignTracers = Rdata.assign.assignTracers
											assignTracers.forEach(function(assignTracer, i){
											var createdAt = new Date(assignTracer.createdAt)
											
											var tracer = assignTracers[i].user.name+': '+createdAt.toTracerDate() +' | <b>'+assignTracer.Note + (assignTracer.Memo!=''?" <br>"+ '&nbsp&nbsp&nbsp&nbsp'+"<u>Memo</u>: "  + assignTracer.Memo:"</b>" )+ "</b>"
											

											window['tr' + i] = document.createElement('tr')
												var td = document.createElement('td')
												td.innerHTML = tracer
												window['tr' + i].appendChild(td)
												var td1 = document.createElement('td')
													var input = document.createElement('input')
													input.type = 'checkbox'
													input.id = 'read'
													input.name = 'read'
													if (assignTracer.Read == true){
														input.checked = true
														input.disabled = true
													} else{
														input.checked = false
													}
													input.addEventListener('click',function(){
														$.post('/assignTracerReadUpd',{assignTracerId:assignTracer.id}).done(function(Rdata){
															if(Rdata.updated==1){
															input.checked = true
															input.disabled = true
															}
														})
														
													})
												td1.appendChild(input)
												window['tr' + i].appendChild(td1)
											
											table.appendChild(window['tr' + i])
											})
										})
										
										$('#eventAction').append(table)
									}
									


								}(assign[x]))
								td.appendChild(a)

							
							td.addEventListener('click',function(userId,dateSC){
								return function(){

									
									var selDate = new Date(dateSC)
										
									if (selDate<lockoutDate && (curUserTitle!='Admin' && curUserTitle!='Manager')&&taskSC!="SWITCH-R"){
										
										SCNote.innerHTML = 'PTO input will not be available after '+ lockoutDate.toFullDate()
										$('#SCNoteDiv').html('')
										$('#SCNoteDiv').html(SCNote)
									}else{
										var taskSC = $('input[name=PTO]:checked').attr('value');
										//- alert($('a[data-toggle=popover]').text())

										var memo = $('#memo').val()
										
										$.post('/dateSC', {postdata:{userId: userId, dateSC:dateSC, taskSC:taskSC, memo:memo}}).done(function(pData){

											if (pData.authorized == false) {
												SCNote.innerHTML= 'You are not authorized for this action'
												$('#SCNoteDiv').html('')
												$('#SCNoteDiv').html(SCNote)
											}else if(!!pData.deleted){
												td.innerHTML='';
												td.style.backgroundColor = 'red'
											}else if(!!pData.Note){
											
											td.innerHTML=pData.Note;
											td.style.backgroundColor = 'yellow'
											} 
										});
									}
								}

							}(userId, dateSC.toFullDate()));
						}else{
							console.log('No note')
							var td = document.createElement('td');
								td.setAttribute('class','cell')
								td.appendChild(document.createTextNode(""));

							td.addEventListener('click',function(userId,dateSC){
								
								return function(){
									var selDate = new Date(dateSC)
									var taskSC = $('input[name=PTO]:checked').attr('value');
									//- Prevent user to request after lockoutDate
									if (selDate<lockoutDate && (curUserTitle!='Admin' && curUserTitle!='Manager') && taskSC!="SWITCH-R"){
										//- alert($('#SCNote').text())
										
										SCNote.innerHTML = 'PTO input will not be available after '+ lockoutDate.toFullDate()
										$('#SCNoteDiv').html('')
										$('#SCNoteDiv').html(SCNote)
									}else{
									//- retrieved taskOption value from radio botton
									
									var memo = $('#memo').val()
									//- console.log(memo)

									//- save or update taskOption value into DB if not existed
									$.post('/dateSC', {postdata:{userId: userId, dateSC:dateSC, taskSC:taskSC, memo:memo}}).done(function(pData){
										
										//- Only allow signed in user to edit their request
										if (pData.authorized == false) {
											SCNote.innerHTML= 'You are not authorized for this action'
											$('#SCNoteDiv').html('')
											$('#SCNoteDiv').html(SCNote)
										}else if(!!pData.Note){
										
										td.innerHTML=pData.Note;
										td.style.backgroundColor = 'yellow'
										} else{

										td.innerHTML='';
										//- td.style.backgroundColor = 'red'
										}
									});
									}
								}
							}(userId, dateSC.toFullDate()));
						}
						//- alert(i+'i')
						//- Reset schedule date position for new user
						if (item.dateSC.lastIndexOf("/") !== 5 && i!=0){
							dateSC.setDate(dateSC.getDate()-7);
						}else if (item.dateSC.indexOf("/") !== 5 && i==0) {

						} else{
							dateSC.setDate(dateSC.getDate()+1);
						}


						//- add new row for next user if user ID changed detected
						if (userDelta != userId){
							var td = document.createElement('td');
							td.setAttribute('class','cell')
							td.appendChild(document.createTextNode(item.dateSC));
							//- alert(arr[i].dateSC)
							window['tr' + userId] = document.createElement('tr');
							window['tr' + userId].appendChild(td);
							table.appendChild(window['tr' + userId]);
						}else{
							window['tr' + userId].appendChild(td);
							table.appendChild(window['tr' + userId]);
						}	
						userDelta = userId;
					})
				})	


				
				if (today > date21LK){

					lockoutDate.setDate(lockoutDate.getDate()+28)

					$.post('/sysObjUpdate', {pData:{name:'lockoutDate', value:lockoutDate.toFullDate()}}).done(function(rData){
						
						//- output lock out Note
						$('#SCNote').text('NOTE: PTO input will not be available after '+ rData.lockoutDate) 
					});

				}

				//- output lock out Note 
				mainSC.append(table);	

				
			});

		}	



		$.getJSON('/taskOption').done(function(Rdata){
			var curUserTitle = Rdata.curUserTitle;
			var ul = document.createElement('ul');
			ul.setAttribute('id','PTORadio')
			ul.className = 'nav navbar-nav'

			var arrayOption = ['NEW OPTION','SELECT', 'DELETE', 'PTO-R', 'SWITCH-R']

			arrayOption.forEach(function(taskOption, i){
				var li = document.createElement('li');
				li.style.color = 'blue';
				li.style.width = '150px'
				
					var radio = document.createElement('input');
					radio.setAttribute('type','radio');
					radio.setAttribute('name','PTO');
					radio.setAttribute('value',taskOption);
					if (taskOption=='SELECT'){
						radio.setAttribute('checked','checked');
						}

					if (taskOption=='PTO-R'){
						radio.addEventListener('click', function(){
						//- alert('radio click')
						if ($('#memo').length>0){
							ul.removeChild(document.getElementById('memo'))
							}
						var input = document.createElement('input');
						input.style.width = '240px';
						input.setAttribute('placeholder','Add Memo');
						input.setAttribute('type','text');
						input.setAttribute('id','memo');
						ul.insertBefore(input, li)
						})
						//- radio.addEventListener('blur', function(){
						//- 	ul.removeChild(document.getElementById('memo'))
						//- })

					} else if(taskOption=='NEW OPTION'&&(curUserTitle=='Admin'|| curUserTitle=='Manager')){
						radio.addEventListener('click', function(){
						//- alert('radio click')
							if ($('#taskOption').length>0){
								ul.removeChild(document.getElementById('taskOption'))
								}
							var input = document.createElement('input');
							input.style.width = '120px';
							input.setAttribute('placeholder','Add Option');
							input.setAttribute('type','text');
							input.setAttribute('id','taskOption');
							input.addEventListener('blur', function(){
							
								var taskOptionData = $("#taskOption").val().toUpperCase();

								$.post('/taskOption',{taskOption:taskOptionData}).done(function(pData){
								
									if (pData.created){
										taskOptionFct(i, pData.taskOption);
										$('#taskOption').val('')
										ul.appendChild(li)
									}else{
										$('#taskOption').val('')
									}
								});
							});

							ul.insertBefore(input, li)

						})

						//- radio.addEventListener('blur', function(){
						//- 	ul.removeChild(document.getElementById('taskOption'))
						//- })


					}
					
					
				li.appendChild(radio);
				li.appendChild(document.createTextNode(taskOption));
				ul.appendChild(li);

			})
			
			//- function to list taskOption from return data
			function taskOptionFct(i, taskOption){
				if(curUserTitle=='Admin'|| curUserTitle=='Manager'){
					var li = document.createElement('li');
					li.style.color = 'blue'
					li.style.width = '150px'
						var radio = document.createElement('input');
						radio.setAttribute('type','radio');
						radio.setAttribute('name','PTO');
						radio.setAttribute('value',taskOption.description);
						radio.addEventListener('click', function(){
							//- alert('radio click')
							if ($('#memo').length>0){
								ul.removeChild(document.getElementById('memo'))
								}
							var input = document.createElement('input');
							input.style.width = '240px';
							input.setAttribute('placeholder','Add Memo');
							input.setAttribute('type','text');
							input.setAttribute('id','memo');
							ul.insertBefore(input, li)
						})

					//- radio.setAttribute('checked','checked');
					li.appendChild(radio);
					li.appendChild(document.createTextNode(taskOption.description));

					//- click on list item to bring up the 'x'
					li.addEventListener('mouseenter',function(){
						if (li.childNodes.length >2){
								li.removeChild(li.childNodes[2])
							}
						var span = document.createElement('span')
						span.innerHTML = '';
						span.style.color = 'red'
						span.className = "glyphicon glyphicon-remove-circle"
						span.id = 'delGly';
						//- click the 'x' to remove from list
						span.addEventListener('click', function(){

							$.post('/delTaskOption',{taskOption:taskOption.description}).done(function(pData){
								ul.removeChild(li)
							});
							
						});
						li.appendChild(span)
					});
					//- the 'x' disapear on mouseleave
					li.addEventListener('mouseleave',function(){
						if ($('#delGly').length>0){
							li.removeChild(document.getElementById('delGly'))
						}
					})
					ul.appendChild(li);
				}
			}
			
			//- execute taskOption function with rData
			$.each(Rdata.taskOption, taskOptionFct);
			
			$('#taskOptionDiv').append(ul);
		});
	

