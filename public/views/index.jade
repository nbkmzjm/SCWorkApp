extends ../views/layout/layout.jade

	
block title 
	title Home

block header
	include ../views/layout/header.jade

block horMenu
	include ../views/layout/horMenu.jade

block content
	#container
		//- #test
		#eventAction.container
		#calendarPick
		#mainSC
		#SCNoteDiv
		
		nav(class="navbar navbar-default")
			div(class="container-fluid" id="taskOptionDiv")
	


append scripts 
	script(src="public/fnLib/homeFn.js")
	script.
		
		$(function (){
			//- var p = document.createElement('p')
			//- p.innerHTML = 'hello'
			//- p.style.backgroundColor = 'red'
			//- p.style.width = "25px"
			//- var span = document.createElement('span')
			//- span.appendChild(document.createTextNode('ola'))
			//- span.style.backgroundColor = 'blue'
			//- span.style.width = "25px"
			
			//- var test = document.getElementById('test')
			//- test.style.width = "100px"
			//- test.id = 'test'
			//- test.style.backgroundColor = 'yellow'
			//- test.appendChild(p)
			//- test.appendChild(span)
			//- test.addEventListener('mouseover', function(){
			//- 	console.log(event.target.childNodes[0].offsetTop)
			//- })

			//- test.ondragover = function(event){
			//- 	event.preventDefault()
			//- }
			
			calendarPick();
			
			$.post('/ajaxUser').done(mainSC);



		});
		
		function noteColor(assignNote, element){
			if (assignNote=='PTO'){
				element.style.color = 'green'
			}else if(assignNote=='PTO-R'){
				element.style.color = '#FFBD4B'
			}else{
				element.style.color = 'blue'
			}
		}

		var getKeys = function(obj){
		   var keys = [];
		   for(var key in obj){
		      keys.push(key);
		   }
		   return keys;
		}

		function clearEvent(sDate, eDate){
			$.post('clearEvent',{
				sDate:sDate,
				eDate:eDate
			})

		}


		function mainSC(data){
			//- alert(JSON.stringify(data, null, 4))
			$.post('/sysObjRead', {pData:['lockoutDate']}).done(function(rData){
				this.data = data
				var mainSC = $('#mainSC');
				mainSC.html('');

				var curDate = $('#calendar').val();
				var weekStart = moment(curDate, 'MM-DD-YYYY').isoWeekday(1);
				var dateHeader = moment(weekStart.format());
				var days = ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"];
				var lockoutDate =moment(rData.lockoutDate||'4-24-16', 'MM-DD-YYYY')

				var table = document.createElement('table');
				table.setAttribute('id', 'main');
				table.setAttribute('class','table table-striped')
				var tr = document.createElement('tr');
					var td = document.createElement('td');
						td.appendChild(document.createTextNode('User'));
						
					tr.appendChild(td);
					for (var i=0; i<7; i++){
						 
						var td = document.createElement('td');
						//- td.appendChild(document.createTextNode(days[dateSC.getDay()]));
						//- td.appendChild(document.createElement('br'))
						td.innerHTML = dateHeader.format('ddd , MMM DD')
						dateHeader.isSame(lockoutDate)?
						td.style.backgroundColor= 'red':''
						dateHeader.isSame(moment(lockoutDate).subtract(28, 'days'))?
						td.style.backgroundColor= 'green':''
						dateHeader.isSame(moment(lockoutDate).subtract(21, 'days'))?
						td.style.backgroundColor= 'yellow':''
						tr.appendChild(td);

						dateHeader.add(1, 'days');
						}
				table.appendChild(tr);
				

				//- Create DateSC array with userID and dateSC
				var users = data.pData.users;
				var arrDateSC = moment(weekStart.format());
				var arrListDateSC = [];
				for (var i=0; i< users.length; i++){
				
					    for (var x=0; x<7; x++){
							var taskSCData = {};
							
							//- if (x==0){
								//- taskSCData.userId = users[i].id;
								//- taskSCData.dateSC = users[i].name;
								//- taskSCData.title = users[i].title
							//- }else{
								taskSCData.userId = users[i].id;
								taskSCData.dateSC = arrDateSC.format('MM-DD-YYYY');
								taskSCData.name = users[i].name;
								taskSCData.title = users[i].title
								arrDateSC.add(1, 'days')
							//- }
							arrListDateSC.push(taskSCData);
						}
						
					arrDateSC.subtract(7, 'days');
				}
			
			
				
				
				//- alert(JSON.stringify(arrListDateSC, null, 4))
				
				var today = moment()

				
				var date21LK = moment(lockoutDate).subtract(21, 'days')
				var date28LK = moment(lockoutDate).subtract(28, 'days')
				
				if (today > date21LK){

					lockoutDate.add(28, 'days')

					$.post('/sysObjUpdate', {pData:{name:'lockoutDate', value:lockoutDate.format('MM-DD-YYYY')}}).done(function(rData){
						
						//- output lock out Note
						
					});

				}
				
							
				$.post('/taskSC',{
					sDate:weekStart.format('MM-DD-YYYY')
					}).done(function(rData){
					//- alert(JSON.stringify(rData.assign, null, 4))
					//- alert(JSON.stringify(arrListDateSC, null, 4))
					var assign = rData.assign
					
					var curUser = rData.curUser
					var curUserTitle = curUser.title
					var curUserId = curUser.id

					var userDelta = 0
					var titleDelta = ''
					var SCNote = document.createElement('p')
					SCNote.id = 'SCNote'
					SCNote.style.color = '#00A117'
					SCNote.style.fontWeight = 'bold'
					
					arrListDateSC.forEach(function(item,i){
					
						var userId = item.userId
						var userTitle = item.title
						var dateSC = item.dateSC

						var foundSC = function(assign, item){
							for (x = 0; x< assign.length; x++ ){
								//- console.log(moment(assign[x].datePos,'MM-DD-YYYY'))
								if (moment(assign[x].datePos,'MM-DD-YYYY').isSame(moment(item.dateSC,'MM-DD-YYYY')) && assign[x].userId==userId){
								return true
								}
							}
							return false
						}(assign, item)
						if (foundSC){
							//- alert(JSON.stringify(assign[x], null, 4))
							
							var datePos = moment(assign[x].datePos,'MM-DD-YYYY')
							var memo = assign[x].Memo
							var tracer = '';
							var firstTracer = '';
							var td = document.createElement('td');
							
							td.setAttribute('class','cell')
								var a = document.createElement('a')
								noteColor(assign[x].Note, a)
								
								a.innerHTML= assign[x].Note

									if (!datePos.isBetween(date28LK,lockoutDate)){
										var span = document.createElement('span')
										span.style.color = '#FF8C5A'
										span.className = "badge"
										span.style.float = 'right'
										
										var assignTracers = assign[x].assignTracers

										var unreadCount = 0;
										assignTracers.forEach(function(assignTracer, i){
											
											var createdAt = moment(assignTracer.createdAt)
											
											if(assignTracer.Read == false){
												if (i == 0){
													firstTracer = assignTracers[i].user.name+': '+createdAt.format('MMM D @HH:m:s') +' | <b>'+assignTracer.Note +(assignTracer.Memo!=''?" <br>"+ '&nbsp&nbsp&nbsp&nbsp'+"<u>Memo</u>: "  + assignTracer.Memo:"</b>" )
												}else{
													tracer += assignTracers[i].user.name+': '+createdAt.format('MMM D @HH:m:s') +' | <b>'+assignTracer.Note + (assignTracer.Memo!=''?" <br>"+ '&nbsp&nbsp&nbsp&nbsp'+"<u>Memo</u>: "  + assignTracer.Memo:"</b>" )+ "</b><br>"
												}
											
												unreadCount++
											}
										})
										if (unreadCount!=0){
											span.innerHTML = unreadCount
										}
										a.appendChild(span)
									}

									
								a.setAttribute('href','#');
								a.setAttribute('data-toggle','popover');
								a.setAttribute('data-trigger','hover');
								a.setAttribute('data-placement','auto');
								a.style.fontWeight = 'bold'
								a.setAttribute('title', firstTracer);
								document.addEventListener('mousemove', function(){
									var taskSC = $('input[name=PTO]:checked').attr('value');
									if (taskSC=="SELECT"){

										a.setAttribute('data-content', tracer);
										
										$('[data-toggle="popover"]').popover({html:true})
									//- }else if (taskSC=='SELECT'){
									//- 	a.setAttribute('data-content', 'Memo:<br>' + memo);
									//- 	$('[data-toggle="popover"]').popover({html:true})
									}else{
										$('[data-toggle="popover"]').popover('destroy')
									}
								})
								
								//- document.addEventListener('click',function(){
								//- 	$('#eventAction').html('')
								//- })
								td.addEventListener('click', function(assign){
									return function(){

										var taskSC = $('input[name=PTO]:checked').attr('value');
											
										var arrayTitle_UserTab = ['Admin', 'Manager']
										if (taskSC=='SELECT'&&(curUserId==assign.userId || arrayTitle_UserTab.indexOf(curUserTitle) != -1)){
											
											$('#eventAction').html('')
											//- event.preventDefault()
											
											var table = document.createElement('table');
											table.setAttribute('id', 'eventActionTable');
											table.draggable = true
											table.addEventListener('mouseenter', function(){
												//- if (li.childNodes.length >2){
												//- 		li.removeChild(li.childNodes[2])
												//- 	}
												document.getElementById('eventAction').style.position = 'relative'
												if ($('#eventAction').children()[0].id != 'delGly'){
													var span = document.createElement('span')
													span.innerHTML = '';
													span.style.color = 'red'
													span.style.position = 'absolute'
													span.style.right = '17px'
													span.className = "glyphicon glyphicon-remove-circle"
													span.id = 'delGly';
													//- click the 'x' to remove from list
													span.addEventListener('click', function(){
														$('#eventActionTable').length>0 ? 
														$('#eventActionTable').remove():'';
														$('#delGly').remove()
														
													});
													$('#eventAction').prepend(span)
												}
											});
											$('#eventAction').on('mouseleave', function(){
												$('#delGly').remove()
											})
											var tr = document.createElement('tr')
												var arrayField = ['Event Changes for '+ assign.datePos, 'Acknowledged']

												arrayField.forEach(function(field){
													
													var td = document.createElement('td')
													td.appendChild(document.createTextNode(field))
													tr.appendChild(td)
												})
											table.appendChild(tr)

											$.post('/assignTracerRead',{
												assignId:assign.id,
											}).done(function(Rdata){
												assignTracers = Rdata.assign.assignTracers
												assignTracers.forEach(function(assignTracer, i){
												var createdAt = moment(assignTracer.createdAt)
												
												var tracer = assignTracers[i].user.name+': '+createdAt.format('MMM D @HH:m:s') +' | <b>'+assignTracer.Note + (assignTracer.Memo!=''?" <br>"+ '&nbsp&nbsp&nbsp&nbsp'+"<u>Memo</u>: "  + assignTracer.Memo:"</b>" )+ "</b>"
												

												window['tr' + i] = document.createElement('tr')
													var td = document.createElement('td')
													td.innerHTML = tracer
													window['tr' + i].appendChild(td)
													var td1 = document.createElement('td')
														var input = document.createElement('input')
														input.type = 'checkbox'
														input.id = 'read'
														input.name = 'read'
														if (assignTracer.Read == true){
															input.checked = true
															input.disabled = true
														} else{
															input.checked = false
														}
														input.addEventListener('click',function(){
															$.post('/assignTracerReadUpd',{assignTracerId:assignTracer.id}).done(function(Rdata){
																if(Rdata.updated==1){
																input.checked = true
																input.disabled = true
																}
															})
															
														})
													td1.appendChild(input)
													window['tr' + i].appendChild(td1)
												
												table.appendChild(window['tr' + i])
												})
											})
											
											$('#eventAction').append(table)
											
											document.ondragover = function(event){
												event.preventDefault()
											}
											document.ondrop = function(){
												event.preventDefault();
												document.ondragover = function(){};
												$('#eventActionTable').length>0 ? 
												$('#eventActionTable').remove():'';
												
											}
										}
									}
									



								}(assign[x]))
								td.appendChild(a)

							
							td.addEventListener('click',function(userId,assign){
								return function(){
									var Note = assign.Note
									//- var dateSC = assign.datePos
									var taskSC = $('input[name=PTO]:checked').attr('value');
									var selDate = dateSC
									if (selDate<lockoutDate && (curUserTitle!='Admin' && curUserTitle!='Manager')&&taskSC!="SWITCH-R"){
										
										SCNote.innerHTML = 'PTO input will not be available after '+ lockoutDate.toFullDate()
										$('#SCNoteDiv').html('')
										$('#SCNoteDiv').html(SCNote)
										$('#SCNote').show(1000, function(){
											$('#SCNote').hide()
										})
									}else{
										var taskSC = $('input[name=PTO]:checked').attr('value');
										//- alert($('a[data-toggle=popover]').text())

										var memo = $('#memo').val()
										
										$.post('/dateSC', {postdata:{userId: userId, dateSC:dateSC, taskSC:taskSC, memo:memo}}).done(function(pData){

											if (pData.authorized == false) {
												SCNote.innerHTML= 'You are not authorized for this action'
												$('#SCNoteDiv').html('')
												$('#SCNoteDiv').html(SCNote)

											}else if(!!pData.deleted){
												td.innerHTML='';
												td.style.backgroundColor = 'red'
											}else if(!!pData.Note){
											
											td.innerHTML=pData.Note;
											td.style.backgroundColor = 'yellow'
											} 
										});
									}
								}

							}(userId, assign[x]));
						}else{
							var td = document.createElement('td');
								td.setAttribute('class','cell')
								td.appendChild(document.createTextNode(""));

							td.addEventListener('click',function(userId,dateSC){
								
								return function(){
									//- $('#SCNote').fadeIn()
									var selDate = dateSC
									var taskSC = $('input[name=PTO]:checked').attr('value');
									//- Prevent user to request after lockoutDate
									if (selDate<lockoutDate && (curUserTitle!='Admin' && curUserTitle!='Manager') && taskSC!="SWITCH-R"){
										//- alert($('#SCNote').text())
										
										SCNote.innerHTML = 'PTO input will not be available after '+ lockoutDate.toFullDate()

										$('#SCNoteDiv').html('')
										$('#SCNoteDiv').html(SCNote)
										$('#SCNote').show(1000, function(){
											$('#SCNote').hide()
										})
										
										

									}else{
									//- retrieved taskOption value from radio botton
									
									var memo = $('#memo').val()
									//- console.log(memo)

									//- save or update taskOption value into DB if not existed
									$.post('/dateSC', {postdata:{userId: userId, dateSC:dateSC, taskSC:taskSC, memo:memo}}).done(function(pData){
										
										//- Only allow signed in user to edit their request
										if (pData.authorized == false) {
											SCNote.innerHTML= 'You are not authorized for this action'
											$('#SCNoteDiv').html('')
											$('#SCNoteDiv').html(SCNote)
											$('#SCNote').show(1000, function(){
											$('#SCNote').hide()
										})
											
											//- $('#SCNote').fadeOut()
										}else if(!!pData.Note){
										
										td.innerHTML=pData.Note;
										td.style.backgroundColor = 'yellow'
										} else{

										td.innerHTML='';
										//- td.style.backgroundColor = 'red'
										}
									});
									}
								}
							}(userId, dateSC));
						}
						//- Reset schedule date position for new user
						//- console.log(userId+'-'+userTitle+'-'+dateSC)
						

						//- add new row for next user if user ID changed detected
						if (userId != userDelta && userTitle != titleDelta ){
							var tdUser = document.createElement('td');
							tdUser.setAttribute('class','cell')
							tdUser.appendChild(document.createTextNode(item.name));
							//- alert(arr[i].dateSC)
							window['tr' + userId] = document.createElement('tr');
							window['tr' + userId].style.borderTop = 'medium double #1FD6FD'
							window['tr' + userId].appendChild(tdUser);
							window['tr' + userId].appendChild(td);
							//- table.appendChild(window['tr' + userId]);
						}else if(userId != userDelta && userTitle == titleDelta){
							var tdUser = document.createElement('td');
							tdUser.setAttribute('class','cell')
							tdUser.appendChild(document.createTextNode(item.name));
							//- alert(arr[i].dateSC)
							window['tr' + userId] = document.createElement('tr');
							
							window['tr' + userId].appendChild(tdUser);
							window['tr' + userId].appendChild(td);
							
						}else{
							window['tr' + userId].appendChild(td);
							table.appendChild(window['tr' + userId]);

						}	
						userDelta = userId;
						titleDelta = userTitle;
					})
				})	


				
				

				//- output lock out Note 
				mainSC.append(table);	

				
			});

		}	



		$.getJSON('/taskOption').done(function(Rdata){
			var curUserTitle = Rdata.curUserTitle;
			var ul = document.createElement('ul');
			ul.setAttribute('id','PTORadio')
			ul.className = 'nav navbar-nav'

			var arrayOption = ['SELECT','NEW OPTION', 'DELETE', 'PTO-R', 'SWITCH-R']

			arrayOption.forEach(function(taskOption, i){

					var li = document.createElement('li');
					li.style.color = 'blue';
					li.style.width = '200px'
					
						var radio = document.createElement('input');
						radio.setAttribute('type','radio');
						radio.setAttribute('name','PTO');
						radio.setAttribute('value',taskOption);
						if (taskOption=='SELECT'){
							radio.setAttribute('checked','checked');
							}

						if (taskOption=='PTO-R'||taskOption=='SWITCH-R'){
							li.addEventListener('click', function(){
								if ($('#memo').length>0){
									ul.removeChild(document.getElementById('memo'))
								}else{
								var input = document.createElement('input');
								input.style.width = '240px';
								input.setAttribute('placeholder','Add Memo');
								input.setAttribute('type','text');
								input.setAttribute('id','memo');
								ul.insertBefore(input, li)
								}
							})	
							
							li.appendChild(radio);
							li.appendChild(document.createTextNode(taskOption));
							ul.appendChild(li);
	 
								
							
						} else if(taskOption=='NEW OPTION'&&(curUserTitle=='Admin'|| curUserTitle=='Manager')){
							li.addEventListener('click', function(){
							//- alert('radio click')
								if ($('#taskOption').length>0){
									ul.removeChild(document.getElementById('taskOption'))
								}else{
								var input = document.createElement('input');
								input.style.width = '120px';
								input.setAttribute('placeholder','Add Option');
								input.setAttribute('type','text');
								input.setAttribute('id','taskOption');
								input.addEventListener('blur', function(){
								
									var taskOptionData = $("#taskOption").val().toUpperCase();

									$.post('/taskOption',{taskOption:taskOptionData}).done(function(pData){
									
										if (pData.created){
											taskOptionFct(i, pData.taskOption);
											$('#taskOption').val('')
											ul.appendChild(li)
										}else{
											$('#taskOption').val('')
										}
									});
								});

								ul.insertBefore(input, li)
								}
							})
							li.appendChild(radio);
							li.appendChild(document.createTextNode(taskOption));
							ul.appendChild(li);

						} else if(taskOption=='NEW OPTION'&&(curUserTitle!='Admin'|| curUserTitle!='Manager')){

						} else{
							li.addEventListener('click', function(){
								$('#memo').length>0?ul.removeChild(document.getElementById('memo')):''
								$('#taskOption').length>0 ? ul.removeChild(document.getElementById('taskOption')):''
							})
							li.appendChild(radio);
							li.appendChild(document.createTextNode(taskOption));
							ul.appendChild(li);
						}
						
					li.addEventListener('click',function(){
						radio.checked = 'checked'
					})
					
				

			})
			
			//- function to list taskOption from return data
			function taskOptionFct(i, taskOption){
				if(curUserTitle=='Admin'|| curUserTitle=='Manager'){
					var li = document.createElement('li');
					li.style.color = 'blue'
					li.style.width = '200px'
						var radio = document.createElement('input');
						radio.setAttribute('type','radio');
						radio.setAttribute('name','PTO');
						radio.setAttribute('value',taskOption.description);
					li.addEventListener('click', function(){
						//- alert('radio click')
						if ($('#memo').length>0){
							ul.removeChild(document.getElementById('memo'))
						}else{
						var input = document.createElement('input');
						input.style.width = '240px';
						input.setAttribute('placeholder','Add Memo');
						input.setAttribute('type','text');
						input.setAttribute('id','memo');
						ul.insertBefore(input, li)
						}
					})


					//- radio.setAttribute('checked','checked');
					li.appendChild(radio);
					li.appendChild(document.createTextNode(taskOption.description));

					//- click on list item to bring up the 'x'
					li.addEventListener('mouseenter',function(){
						if (li.childNodes.length >2){
								li.removeChild(li.childNodes[2])
							}
						var span = document.createElement('span')
						span.innerHTML = '';
						span.style.color = 'red'
						span.className = "glyphicon glyphicon-remove-circle"
						span.id = 'delGly';
						//- click the 'x' to remove from list
						span.addEventListener('click', function(){

							$.post('/delTaskOption',{taskOption:taskOption.description}).done(function(pData){
								ul.removeChild(li)
							});
							
						});
						li.appendChild(span)
					});
					//- the 'x' disapear on mouseleave
					li.addEventListener('mouseleave',function(){
						if ($('#delGly').length>0){
							li.removeChild(document.getElementById('delGly'))
						}
					})
					li.addEventListener('click',function(){
					radio.checked = 'checked'
				})
					ul.appendChild(li);
				}
			}
			
			//- execute taskOption function with rData
			$.each(Rdata.taskOption, taskOptionFct);
			
			$('#taskOptionDiv').append(ul);
		});
	

